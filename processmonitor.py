# -*- coding: utf-8 -*-
"""processmonitor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dGCrZEpIZ7echB3NWJU8x18m8oxGlybV
"""

!pip install flask-ngrok pyngrok psutil

!pip install fastapi uvicorn nest-asyncio psutil --quiet
!wget -q -O ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
!unzip -o ngrok.zip

# âœ… Backend: FastAPI app with CORS enabled
import uvicorn
import nest_asyncio
import threading
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import psutil

app = FastAPI()

# âœ… Add middleware BEFORE app starts
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/processes")
def get_processes():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            processes.append(proc.info)
        except:
            continue
    return processes

nest_asyncio.apply()

def run():
    uvicorn.run(app, host="0.0.0.0", port=8000)

thread = threading.Thread(target=run)
thread.start()

!wget -q -O ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
!unzip -o ngrok.zip

!./ngrok config add-authtoken 2uf5AVli0Hv3BiECbD8l92nDQaY_orC7Fs7b2NtcGeEbrCVG

get_ipython().system_raw('./ngrok http 8000 &')

import requests
import time

time.sleep(4)


res = requests.get('http://localhost:4040/api/tunnels')
tunnels = res.json()['tunnels']
public_url = [t['public_url'] for t in tunnels if t['proto'] == 'https'][0]
print(f"ðŸš€ Your public API is live at: {public_url}/processes")

# âœ… Install FastAPI & dependencies (skip pyngrok!)
!pip install fastapi nest-asyncio uvicorn psutil --quiet
!wget -q -O ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
!unzip -o ngrok.zip

import nest_asyncio
import uvicorn
import threading
import psutil
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/processes")
def list_processes():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            processes.append(proc.info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return processes

nest_asyncio.apply()

def run():
    uvicorn.run(app, host="0.0.0.0", port=8000)

thread = threading.Thread(target=run)
thread.start()

#  Get this from https://dashboard.ngrok.com/get-started/setup
!./ngrok config 2uf5AVli0Hv3BiECbD8l92nDQaY_orC7Fs7b2NtcGeEbrCVG

get_ipython().system_raw('./ngrok http 8000 &')



# âœ… Install everything (if not already installed)
!pip install fastapi uvicorn nest-asyncio psutil --quiet
!wget -q -O ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
!unzip -o ngrok.zip

# âœ… Backend: FastAPI app with CORS enabled
import uvicorn
import nest_asyncio
import threading
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import psutil

app = FastAPI()

# âœ… Add middleware BEFORE app starts
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/processes")
def get_processes():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            processes.append(proc.info)
        except:
            continue
    return processes

nest_asyncio.apply()

def run():
    uvicorn.run(app, host="0.0.0.0", port=8000)

thread = threading.Thread(target=run)
thread.start()



# âœ… Step 1: Install dependencies
!pip install flask flask-cors pyngrok

# âœ… Step 2: Upload HTML file
from google.colab import files
uploaded = files.upload()

# âœ… Step 3: Move HTML file to static folder
import os
os.makedirs("static", exist_ok=True)
for filename in uploaded:
    if filename.endswith(".html"):
        os.rename(filename, os.path.join("static", "indexflask.html"))

# âœ… Step 4: Set up Flask app
from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
from pyngrok import ngrok
import psutil

app = Flask(__name__, static_folder='static', static_url_path='')
CORS(app)

@app.route('/')
def index():
    return send_from_directory('static', 'indexflask.html')

@app.route('/get_system_usage', methods=['GET'])
def get_system_usage():
    system_usage = {
        'cpu_percent': psutil.cpu_percent(interval=1),
        'memory_percent': psutil.virtual_memory().percent
    }
    return jsonify(system_usage)

@app.route('/get_processes', methods=['GET'])
def get_processes():
    try:
        processes = []
        for process in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info', 'num_threads']):
            processes.append({
                'pid': process.info['pid'],
                'name': process.info['name'],
                'cpu_percent': process.info['cpu_percent'],
                'memory_usage': round(process.info['memory_info'].rss / 1024 / 1024, 2),
                'num_threads': process.info['num_threads']
            })
        return jsonify(processes)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# âœ… Step 5: Start server and expose via ngrok
from threading import Thread

def run_app():
    app.run(port=8080)

print("ðŸš€ Starting Flask server and ngrok tunnel...")
public_url = ngrok.connect(8000)
print(f"ðŸ”— Your dashboard is live at: {public_url}")

# Run Flask app in background
Thread(target=run_app).start()

from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
from pyngrok import ngrok
from threading import Thread
import os
import psutil

# âœ… Static folder
os.makedirs("static", exist_ok=True)

# âœ… Flask app setup
app = Flask(__name__, static_folder='static', static_url_path='')
CORS(app)

@app.route('/')
def index():
    return send_from_directory('static', 'indexflask.html')

@app.route('/get_system_usage')
def get_system_usage():
    return jsonify({
        'cpu_percent': psutil.cpu_percent(interval=1),
        'memory_percent': psutil.virtual_memory().percent
    })

@app.route('/get_processes')
def get_processes():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info', 'num_threads']):
        try:
            processes.append({
                'pid': proc.info['pid'],
                'name': proc.info['name'],
                'cpu_percent': proc.info['cpu_percent'],
                'memory_usage': round(proc.info['memory_info'].rss / 1024 / 1024, 2),
                'num_threads': proc.info['num_threads']
            })
        except Exception:
            pass
    return jsonify(processes)

def run_app():
    app.run(port=8070)

# âœ… Start Flask
print("ðŸš€ Starting Flask server and ngrok tunnel...")
Thread(target=run_app).start()

# âœ… Restart runtime OR kill old ngrok session first!
public_url = ngrok.connect(8070)
print(f"ðŸ”— Dashboard live at: {public_url}")